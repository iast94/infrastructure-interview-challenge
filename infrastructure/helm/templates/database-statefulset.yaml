apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name | trunc 54   }}-database
  labels:
    component: database
    {{- include "infra-interview-test.labels" . | nindent 4}}
spec:
  serviceName: "nginx"
  replicas: 1
  selector:
    matchLabels:
      component: database
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
  template:
    metadata:
      labels:
        component: database
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
    spec:
      affinity:
        {{ .Values.app.affinity | toYaml | nindent 8 }}
      containers:
      - name: database
        image: {{ .Values.database.image }}
        imagePullPolicy: {{ .Values.app.imagePullPolicy }}
        ports:
        {{- if or (eq .Values.database.type "mariadb") (eq .Values.database.type "mysql") }}
        - containerPort: 3306
        {{- else if eq .Values.database.type "postgresql" }}
        - containerPort: 5432
        {{- end }}
        envFrom:
        - secretRef:
            name: {{ .Release.Name | trunc 55   }}-db-info
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping", "-p$MYSQL_ROOT_PASSWORD"]
          initialDelaySeconds: {{ .Values.database.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.database.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.database.livenessProbe.timeoutSeconds }}
        readinessProbe:
          exec:
            command: ["mysqladmin", "ping", "-p$MYSQL_ROOT_PASSWORD"]
          initialDelaySeconds: {{ .Values.database.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.database.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.database.readinessProbe.timeoutSeconds }}
        securityContext:
          {{- .Values.database.securityContext | toYaml | nindent 10 }}
      {{- if .Values.imagePullSecret }}
      imagePullSecrets:
      - name: {{ .Release.Name | trunc 42 }}-registry-cred
      {{- end }}
      volumes:
      - name: init-scripts
        configMap:
          name: {{ .Release.Name | trunc 41   }}-database-init-scripts
          defaultMode: 0550
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: "standard"
      resources:
        requests:
          storage: "1Gi"
